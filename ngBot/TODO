#####################################################################
# ngBot                                                             #
#####################################################################

    ngBot, will basically be a rewrite of dZSbot. However, ngBot won't
make it into ProjectZS-NG v1.0, since we are currently working on
getting dZSbot stable, and rewriting it is certainly a step in the
opposite direction.


# Features
#####################################################################

- A text-based configuration file, parsed at startup. dZSbot currently
  uses Tcl's set command for the majority of the configuration, which
  has proven to be error prone for inexperienced users.

- The bot will be in its own namespace (::ngBot), to avoid conflicts
  with other scripts loaded on the Eggdrop.

- The section announce/config system will undergo a large rewrite. I'm
  not sure what this rewrite will include yet, but rest assured, there
  will be significant changes.

- Theming will definitely change, the biggest complaint I've heard from
  friends is the %c/%b{} syntax for colors and bold, respectively. Instead,
  SS5-style formatting will be used ([b], [c], [u], [o]) and [c1], [c2],
  for color definitions. Secondly, text positioning and precision will be
  added to cookies %5.5(cookie). (I should probably add some sort of skin
  preview command in DCC chat. (Note, we could also make a script that parses
  .zst to .html, I started such a script for current system))

- Safe handling of log data (dZSbot expects that all log data will be in
  Tcl list form, which isn't always the case).

- A new secure invite system will be implemented, as well as a legacy system.
  Host restrictions and password complexity requirements will be included,
  but optional to use. There will be three different invite methods:
  1. The legacy method (!invite <ftp username> <ftp password>).
  2. Secure local method, a separate password for inviting, this data will be
     stored in a local SQLite database (passwords will be encrypted of course).
  3. Secure global method, same as the local method, except using a MySQL
     database so several sites can share the same invite data.

- Significant features of the script will be 'modulated', to prevent unneeded
  bloat for users who choose not to use them (such as bnc checking and the
  invite system). The 'modules' will be loaded into a child namespace, which
  will be deleted when it's 'unloaded'.

- There will be a set of coding guidelines that all developers are
  expected to adhere to. After all, organization is the first step
  towards quality code. :)

- This is just a preliminary guide, once I began work on ngBot, I will
  update this list.


# Coding Guidelines
#####################################################################

- Function names should be representative of their purpose and must
  be in Pascal case (ThisIsPascalCase, aka upper Camel case).

- Variable names should be representative of their value and must
  be in Camel case (thisIsCamelCase).

- The tab size must be set to 4, and spaces are to be used in place of
  tab characters. This allows any user to have the same experience while
  viewing the code.

- Functions should be no longer than, say, 50 lines of code (not including
  comments), unless it's completely necessary. This practice helps avoid
  long, messy, and chaotic functions (like the ones that plague dZSbot :P).
  Instead they could be simplified and/or split up into several functions.

- All functions should have a 'description' above them, explaining their
  purpose. This makes it easier for future developers and users to hack
  at the code. Had this been a C/C++ project, I would have included the
  parameters and return value in the description. :P

- Comments explaining code should begin with a double hash character. Function
  descriptions are excluded from this rule, as long as they follow the example
  below.

- When commenting out code, a single hash character is fine.

Example:

####
# GetValueList
#
# Create an 'array set' compatible list:
# array set values [GetValueList $inputValues]
#
proc GetValueList {inputValues} {
    set index 0
    set valueList ""
    ## Create the list of values.
    foreach value $inputValues {
        lappend valueList $index $value
        incr index
    }
#   set valueList ""
#   for {set index 0} {$index < [llength $inputValues]} {incr index} {
#       lappend valueList $index [lindex $inputValues $index]
#   }
    return $valueList
}


# Questions, Comments, and/or Suggestions?
#####################################################################

IRC  : neoxed on EFnet (#pzs-ng)
Email: neoxed@gmail.com
