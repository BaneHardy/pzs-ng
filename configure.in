dnl Process this file with autoconf to produce a configure script.

AC_INIT(zipscript/conf/zsconfig.h)
AC_CONFIG_HEADER(config.h)
#AC_PREFIX_DEFAULT(/glftpd/)

dnl Checks for programs.
AC_PROG_CC
AC_CHECK_PROG(GREP, grep, found)
if [[ -z "$GREP" ]]; then AC_MSG_ERROR([Couldn't find grep, quitting!]); fi
AC_CHECK_PROG(STRINGS, strings, found)
if [[ -z "$STRINGS" ]]; then AC_MSG_ERROR([Couldn't find strings, quitting!]); fi
AC_CHECK_PROG(CUT, cut, found)
if [[ -z "$CUT" ]]; then AC_MSG_ERROR([Couldn't find cut, quitting!]); fi

dnl Checks for libraries.
LCRYPT=""
if [[ $(uname -s) != "OpenBSD" ]]; then
	AC_CHECK_LIB(crypt, crypt, LCRYPT="-lcrypt", AC_MSG_ERROR([[Couldn't find libcrypt, quitting!]]))
fi

AC_CHECK_LIB(crypto, HMAC, LCRYPTO="-lcrypto", AC_MSG_ERROR([[Couldn't find libcrypto, quitting!]]))

dnl Checks for header files.
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(paths.h pwd.h regex.h fnmatch.h fcntl.h errno.h, , AC_MSG_ERROR([[Couldn't find required header, quitting!]]))
AC_CHECK_HEADERS(openssl/evp.h openssl/hmac.h openssl/sha.h, , AC_MSG_ERROR([[Couldn't find required header, quitting!]]))
AC_CHECK_HEADERS(sys/ipc.h sys/param.h sys/shm.h sys/time.h sys/uio.h sys/wait.h, , AC_MSG_ERROR([[Couldn't find required header, quitting!]]))

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
dnl These two aren't used yet.

dnl Features

dnl OS :)

#os=unknown
#static=no
#case $(uname -s) in
#    [[Ll][Ii][Nn][Uu][Xx]])
#		os=linux
#		static=no
#        ;;
#	[oO][pP][eE][nN][bB][sS][dD])
#		LCRYPT=""
#		;;
#    [*[bB][sS][dD]*])
#		os=bsd
#		AC_MSG_RESULT([NOTICE: BSD flavour detected, linking statically.])
#		static=yes
#        ;;
#    [Ss][Uu][Nn][Oo][Ss])
#		os=sunos
#		static=no
#        ;;
#
#esac

#if test "$os" = "unknown" ; then
# AC_MSG_ERROR([Couldn't identify OS, quitting!])
#fi

dnl Static linking :)
AC_ARG_ENABLE(static, AS_HELP_STRING([--enable-static], [enable static linking of zs-c]), 
              STATIC="-static"; static="yes", STATIC="")
if test "$static" = "yes" ; then
  AC_MSG_RESULT([NOTICE: linking statically (--enable-static).])
else
  AC_MSG_RESULT([NOTICE: linking dynamically.])
fi

dnl GL version =)
AC_ARG_ENABLE(gl1, AS_HELP_STRING([--enable-gl1], [disable autodetect of glversion, and compile bot binaries for glftpd1]),
              GLVERSION=""; AC_MSG_RESULT([NOTICE: compiling bot binaries for glftpd1. (--enable-gl1).]),
              GLVERSION="detect")			  
if [[ "$GLVERSION" == "detect" ]]; then
  AC_ARG_ENABLE(gl2, AS_HELP_STRING([--enable-gl2], [disable autodetect of glversion, and compile bot binaries for glftpd2]),
                GLVERSION="-DUSE_GLFTPD2"; AC_MSG_RESULT([NOTICE: compiling bot binaries for glftpd2. (--enable-gl2).]),
                GLVERSION="detect")
fi

AC_ARG_WITH(glpath, 
            AS_HELP_STRING([--with-glpath=PATH],
                           [specify nondefault path to root glftpd dir (/glftpd per default)]),
            GLPATH="$withval", GLPATH="/glftpd")

if [[ "$GLVERSION" == "detect" ]]; then
  if [[ ! -d "$GLPATH" ] || [ ! -x "${GLPATH}/bin/glftpd" ]]; then
    AC_MSG_ERROR([Invalid glpath "$GLPATH". Use ./configure --with-glpath=PATH with a valid path! (or --enable-gl1/2 to disable autodetect). Quitting!])
  fi
  glversion="`strings $GLPATH/bin/glftpd|grep -i '^glftpd '|cut -f1 -d.|tr A-Z a-z`"
  if [[ "$glversion" == "glftpd 1" ]]; then
    GLVERSION=""
    AC_MSG_RESULT([NOTICE: detected glversion, compiling bot binaries for glftpd1.])
  else if [[ "$glversion" == "glftpd 2" ]]; then
      GLVERSION="-DUSE_GLFTPD2"
      AC_MSG_RESULT([NOTICE: detected glversion, compiling bot binaries for glftpd2.])
  else
    AC_MSG_ERROR([Couldn't detect glversion, please run ./configure --enable-gl1 or ./configure --enable-gl2. Quitting!])
  fi; fi
fi

AC_SUBST(GLPATH)
AC_SUBST(GLVERSION)
AC_SUBST(STATIC)
AC_SUBST(LCRYPT)
AC_SUBST(LCRYPTO)

AC_OUTPUT(Makefile zipscript/src/Makefile sitebot/src/Makefile sitewho/compile.sh)
AC_MSG_RESULT(Now type 'make' to compile)
